基于函数编程(面向过程)

面向对象编程
1. 访问对属性关闭,对方法开发
2. 指针成员在构造函数中申请, 在析构函数中释放
3. 类中有指针成员时，要写拷贝构造和赋值运算符


class 类关键字      //class.cpp

class和stuct 的区别，
    访问权限不同：
        class：默认私有
        struct：默认公有

        private：私有权限,只有类内才能访问
        public:公有权限,类内和类外都可访问

        编译器默认生成的函数
            1.无参构造函数
            2.复制构造函数
            3.赋值运算符的重载函数


构造函数和析构函数
构造函数:用于初始化对象状态的函数
    特点:
    1. 不需要手动调用
    2. 当不定义构造函数时,编译器会自动生成一个默认的构造函数
    3. 当定义了构造函数后，编译器就不会生成默认构造函数
    4. 函数名和类名相同，无返回值(甚至没有void)
    5. 构造函数可以重载

    拷贝构造函数(复制构造函数):
        1. 函数形式: 同上, 参数必须是对象的引用
        2. 浅拷贝问题：当类中含有含有指针属性时,如果调用拷贝构造,拷贝的是指针的值,      // deepCope.cpp
            使得两个对象的指针指向同一块内存，使得析构时发生二次释放
            深度拷贝: 内存复制      

    赋值运算符的重载函数:

析构函数: 用来释放对象的状态
    1. 不需要手动调用
    2. 函数形式： 函数名和类名相同, 名称前加'~'
    3. 析构函数没有参数
    4. 析构函数不能重构


RVO优化：return value optimizer :返回值优化

将亡值可以看作一个右值
    
new&delete 和 malloc&free 的区别        // new&delete.cpp
    1. 前者是关键字,后者是函数
    2. new 不需要计算申请的内存大小、不需要转换指针、不需要判断指针为空(申请失败直接抛出异常)
    3. 前者会调用构造和析构函数, 后者不会


explicit 关键字,用于防止隐式转换        // explicit.cpp


初始化列表          // const.cpp
    1. 常成员变量必须在初始化列表中进行初始化
    2. 普通成员变量也可以在初始化列表中进行初始化
    3. 初始化列表的操作要快于构造函数的主体


static:         // static.cpp
    C语言: 
        1. 局部变量: 延长生命周期,只初始化一次
        2. 全局变量：只在当前文件可见;  extern 声明变量来自外部文件
        3. 函数,同上
    C++:
        1. 修饰成员变量： 该变量不属于某一个类的成员，而属于类，由该类的所有成员共享
        注意事项： 初始化不由类的对象完成，而由类自己完成