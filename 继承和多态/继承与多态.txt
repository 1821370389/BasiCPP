继承
    继承的大小
        继承的属性的地址是连续的,且父类的属性在子类前面     // 继承/main.cpp
        子类的大小=子类属性的大小+父类的大小
        类的对象(函数)和静态变量不占类的大小
    继承的构造                                          // 继承/ParentConstruct.cpp
        子类的构造函数默认会调用父类的无参构造函数
        若父类无无参构造或要使用父类的有参构造，则要使用初始化函数
    父子指针
        父指针指向子类是安全的，子类指向父类不安全
    多继承                                              // 继承/Multiplelnheritance.cpp
        子类的内存分布是根据类继承时声明的顺序，而不是类定义的顺序
        多继承虚函数, 类比普通虚函数                    // MultiplelnheritanceVirtualFunc.cpp
        同名函数和变量
            多继承中父类见的同名函数/变量的用法: 对象.父类::函数/变量   // theSameNameFun.cpp
    虚继承                                                        // Virtallnheritance.cpp
        菱形继承,即B继承自A,C继承自A,D继承自B&C，则D中会有两遍A的属性
        虚继承 :在BC继承时添加virtual关键字,此方法会增大BC的大小(添加了虚表),但会在A中属性较大时显著降低内存占用

多态
    多态三要素:
        父类指针指向子类对象
        子类重写父类方法(虚函数)
        public继承
    重写:子类重新定义与父类相同的函数签名（函数名称、参数列表、返回类型）的函数     // conceptUse.cpp
        若直接重写则会出问题,因此只能重写父类中的虚函数
    虚函数: 在父类中函数前添加 virtual 关键字修饰,C++中的多态就是通过虚函数来实现的;
        只要父类中声明为虚函数，子类中重写的函数也自动变成虚函数(即子类可以省略virtual关键字)
        虚表: 用于存放虚函数的地址, 虚表在内存中位置在父类变量的前面,(父变量后是子变量)
    虚析构: 当使用父类指针指向子类对象可能会引起子类中的空间未被释放, 为此需要在父类的析构函数前加 virtual 关键词
    纯虚函数: 没有函数体且初始化为0的虚函数， 用来定义接口规范
        抽象类(Abstract Class)
            含有纯虚函数的类,不可以实例化(不可创建对象)
            抽象类也可以包含非纯虚函数、成员变量
            如果父类是抽象类,子类没有完全重写纯虚函数，那么这个子类依然是抽象类