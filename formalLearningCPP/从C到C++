C++

1、对C的兼容:所有的C语言程序都是标准的C++程序
2、后缀 .cpp
3、 标准输入输出流头文件的改变
4、 g++


C++ 对C的升级:

名称控制:
1、 :: :域解释符
2、 namespace 命名空间
3、 using 声明后面的符号可用
4、 std 是c++标准命名空间


更严格的类型控制

1、 enum加强
2、 boll: 布尔类型 用于判断真假 赋非0值都是1


运算符加强：
三目运算符的加强: 
c语言中三目运算符的返回结果是值
C++中返回值是变量本身
    

关键字加强：
const: 常量声明 C语言中 const声明的常量可以用指针对其值进行修改(伪常量)
而在C++中是真常量，无法修改

const和#define
const被命名空间约束,#define作用在全局，不受约束
const 有明确的数据类型定义,#define没有


struct加强
结构体本身的名字就作为类型,不需要再加struct 的前缀或是重命名
内部可以定义函数


指针加强

变量名:内存的标识
指针:内存的地址
引用:内存的别名
    int &b = a;
    int *const b = &a;
引用代码会在编译阶段被替换成指针常量
注意事项
1.引用不能被单独定义,要初始化
2.初始化后不会再改变朝向
3.引用的本质是指针常量
4.取引用的大小就等于取原变量的大小

左值和右值：
    左值: 有内存的值
    右值: 没有内存的值

const int &a: 常量引用 解决右值没办法传递给左值引用的问题


函数加强
1. 内联函数 
内联规则
    1.不要有循环
    2.条件分支太多不行
    3.不能有取函数地址
    4.不能有递归
    5.

2. 默认参数
    在函数声明时添加,定义时就不用添加了
    默认参数必须放在参数列表的末尾
    默认参数后面的参数必须全部是默认参数

3. 函数重载(多态)
    函数名相同,函数的定义不同
    重载的规则：
        参数类型不一样
        参数数量不一样,默认参数不计入数量,占位参数可以
        参数类型的顺序不一样

C和C++联合编译 
在C语言库的.h文件中
    #ifdef __cplusplus      // 宏定义,用于识别是用gcc还是g++编译的
    extern "C"   # 以下代码以C语言的函数命名方式进行编译
    {
    #endif


    #ifdef __cplusplus
    }
    #endif 

    ;示例于 /home/BasicC/BasicC/function 下

C++内存管理： ; 示例见 memory.cpp
C语言的内存管理
C++引入了新的关键字: new 和 delete
new() delete
new[] delete[]